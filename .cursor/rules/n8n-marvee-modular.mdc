---
description: 
globs: 
alwaysApply: true
---
# Regra de Desenvolvimento Modular para Nós n8n Marvee

Ao criar ou modificar nós customizados n8n neste projeto, siga rigorosamente esta estrutura modular.

## Estrutura Obrigatória

### 1. Organização de Pastas
Sempre organize o código seguindo esta estrutura:
```
nodes/[NomeDoNo]/
├── [NomeDoNo].node.ts      # Nó principal com execute() e switch
├── actions/                # Lógicas específicas de operação
│   ├── statement.ts        # Operações de extrato
│   └── sales.ts           # Operações de vendas
└── helpers/               # Utilitários compartilhados
    ├── apiHelpers.ts      # Load options (customers, accounts, etc)
    └── apiUtils.ts        # Cliente API reutilizável
```

### 2. Padrão do Nó Principal
O arquivo principal deve sempre implementar:

nested_code_snippet_typescript-replace_with-```typescript
import {
    IExecuteFunctions,
    INodeExecutionData,
    INodeType,
    NodeOperationError,
} from 'n8n-workflow';

// Imports de helpers e actions
import { handleOperacao1, handleOperacao2 } from './actions/recurso';

export class SeuNo implements INodeType {
    // description com properties configuradas
    
    async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
        const resource = this.getNodeParameter('resource', 0) as string;
        const operation = this.getNodeParameter('operation', 0) as string;
        
        let results: INodeExecutionData[] = [];
        
        try {
            switch (resource) {
                case 'recurso1':
                    switch (operation) {
                        case 'operacao1':
                            results = await handleOperacao1.call(this);
                            break;
                        default:
                            throw new NodeOperationError(this.getNode(), `Operação não suportada: ${operation}`);
                    }
                    break;
                default:
                    throw new NodeOperationError(this.getNode(), `Recurso não suportado: ${resource}`);
            }
            
            return [results];
        } catch (error) {
            if (error instanceof NodeOperationError) {
                throw error;
            }
            throw new NodeOperationError(this.getNode(), `Erro na execução: ${error.message}`);
        }
    }
}
close_nested_code_snippet-replace_with-```

### 3. Padrão para Actions
Cada função de ação deve seguir este padrão:

nested_code_snippet_typescript-replace_with-```typescript
import { IExecuteFunctions, INodeExecutionData, NodeOperationError } from 'n8n-workflow';
import { MarveeApiClient } from '../helpers/apiUtils';

export async function handleOperacao(this: IExecuteFunctions): Promise<INodeExecutionData[]> {
    const credentials = await this.getCredentials('marveeApi');
    const apiClient = new MarveeApiClient(credentials, this);
    
    // Obter parâmetros
    const param1 = this.getNodeParameter('param1', 0) as string;
    
    try {
        const response = await apiClient.get('/endpoint', { param1 });
        return this.helpers.returnJsonArray(response);
    } catch (error) {
        throw new NodeOperationError(this.getNode(), `Erro na operação: ${error.message}`);
    }
}
close_nested_code_snippet-replace_with-```

### 4. Padrão para API Client
Sempre use a classe MarveeApiClient para requisições:

nested_code_snippet_typescript-replace_with-```typescript
import { IExecuteFunctions, IRequestOptions, IHttpRequestMethods, NodeOperationError } from 'n8n-workflow';

export class MarveeApiClient {
    private baseUrl = 'http://localhost:3333/v1';
    private credentials: any;
    private executeFunctions: IExecuteFunctions;
    
    constructor(credentials: any, executeFunctions: IExecuteFunctions) {
        this.credentials = credentials;
        this.executeFunctions = executeFunctions;
    }
    
    // Métodos get, post, put, delete com tratamento de erro padronizado
}
close_nested_code_snippet-replace_with-```

## Regras Obrigatórias

1. **NUNCA use Error genérico** - sempre use `NodeOperationError`
2. **SEMPRE importe helpers e actions** - mantenha separação de responsabilidades
3. **SEMPRE use this.getCredentials()** - nunca hardcode credenciais
4. **SEMPRE valide parâmetros** - use this.getNodeParameter() com tipos corretos
5. **SEMPRE retorne INodeExecutionData[]** - use this.helpers.returnJsonArray()
6. **SEMPRE use try-catch** - capture e trate erros adequadamente
7. **NUNCA use sistema de routing declarativo** - use execute() com switch statements

## Tratamento de Erros Padronizado

nested_code_snippet_typescript-replace_with-```typescript
try {
    // lógica da operação
} catch (error) {
    throw new NodeOperationError(this.getNode(), `Mensagem específica: ${error.message}`);
}
close_nested_code_snippet-replace_with-```

## Estrutura de Propriedades

Sempre organize as propriedades com displayOptions para mostrar campos condicionalmente:

nested_code_snippet_typescript-replace_with-```typescript
{
    displayName: 'Campo Específico',
    name: 'campoEspecifico',
    type: 'string',
    displayOptions: {
        show: {
            resource: ['recursoEspecifico'],
            operation: ['operacaoEspecifica'],
        },
    },
    default: '',
    description: 'Descrição clara do campo',
}
close_nested_code_snippet-replace_with-```

Siga estas regras sem exceção para manter a consistência e qualidade do código modular.
